namespace "test" do
  require "bundler"
  require "yaml"
  require "unindent"

  def have_rvm?
    @have_rvm ||= `which rvm 2>&1 > /dev/null` && $?.success?
  end

  def have_rbenv?
    @have_rbenv ||= `which rbenv 2>&1 > /dev/null` && $?.success?
  end

  def gem_versions_for rails_version
    mm = rails_version.split(".")[0,2].join(".")
    YAML.load_file("gem-versions.yml")[mm]
  end

  def ruby_version_for rails_version
    ## not needed at the moment; all three supported rails versions run on ruby 2.3.1
    # case rails_version
    # when /^4\.0/
    #   "2.0.0"
    # when /^4\./
    #   "2.1.2"
    # end
  end

  def dir_to_version_and_flavor dir
    dir =~ /rails-([^-]+)-(.*)/
    return [$1, $2]
  end

  def run(cmd, ruby_version=nil)
    if have_rvm?
      if ruby_version
        cmd = "rvm \"#{ruby_version}\" do #{cmd}"
      end
      puts "*running rvm: #{cmd}"
      system cmd
    elsif have_rbenv?
      begin
        if ruby_version
          puts "  (with ruby version #{ruby_version})"
          ENV['RBENV_VERSION'] = ruby_version
          cmd = "rbenv exec #{cmd}"
        end
        puts "* running rbenv: #{cmd}"
        system cmd
      ensure
        ENV.delete('RBENV_VERSION')
      end
    end
    raise "ERROR running command" unless $? == 0
  end

  def setup_rails_app dir
    version, flavor = *(dir_to_version_and_flavor dir)
    ruby_version = ruby_version_for version

    run "./generate_test_directory #{version} #{flavor}"
    bundler_cache = File.expand_path("bundler_cache")
    snowflakes = Array gem_versions_for(version)
    Dir.chdir dir do
      File.open("Gemfile", "w") do |gemfile|
        gemfile.write <<-GEM.unindent
          source "https://rubygems.org"
          gem "rails", "=#{version}"
          gem "loofah", :path => File.join(File.dirname(__FILE__),"../../../loofah")
          gem "loofah-activerecord", :path => File.join(File.dirname(__FILE__),"../..")
          gem "sqlite3-ruby", :require => "sqlite3"
        GEM
        snowflakes.each { |name, versionspec| gemfile.puts %Q{gem "#{name}", "#{versionspec}"} }
      end
      FileUtils.rm_f "Gemfile.lock"
      Bundler.with_clean_env do
        begin
          run "bundle install --quiet --local --path=#{bundler_cache}", ruby_version
        rescue
          run "bundle install --quiet --path=#{bundler_cache}", ruby_version
        end
      end
    end
  end

  def test_rails_app dir
    version, flavor = *(dir_to_version_and_flavor dir)
    ruby_version = ruby_version_for version

    @results ||= {}
    Dir.chdir(dir) do
      FileUtils.mkdir_p "log"
      begin
        run "touch db/test.sqlite3" # db:create doesn't exist before rails 2.0
        Bundler.with_clean_env do
          ENV['RAILS_ENV'] = "test"
          run "bundle exec rake db:migrate test:units", ruby_version
        end
      rescue Object
        @results[dir] = "FAIL"
      else
        @results[dir] = "SUCCESS"
      end
    end
  end

  def print_results
    puts "----- RESULTS -----"
    @results.keys.sort.each do |key|
      puts "* #{key}: #{@results[key]}"
    end
  end

  Dir["#{File.dirname(__FILE__)}/rails-*"].sort.each do |fqdir|
    dir = File.basename fqdir
    desc "test #{dir}"
    task "#{dir}" do
      Dir.chdir(File.dirname(__FILE__)) do
        setup_rails_app dir
        test_rails_app dir
      end
    end
  end

  desc "run tests across various versions of Rails"
  task :rails do
    Dir["#{File.dirname(__FILE__)}/rails-*"].sort.reverse.each do |fqdir|
      dir = File.basename fqdir
      Rake::Task["test:#{dir}"].invoke
    end
    print_results
  end
end
